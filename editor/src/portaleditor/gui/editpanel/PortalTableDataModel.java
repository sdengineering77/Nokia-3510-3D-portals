/* Generated by Together */

package portaleditor.gui.editpanel;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Hashtable;

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

import portaleditor.data.DefaultPortalValues;
import portaleditor.data.PortalObject;

public class PortalTableDataModel extends AbstractTableModel {
	
	private final String[] 	columnNames					= { "Name", 
																"Value" };
	private final double[]	columnSizesPerc				= { 0.50,
																0.50};
	
	private Hashtable			keyValueHash 				= new Hashtable(); 
	private Hashtable			editableHash				= new Hashtable();
	private ArrayList			attributeNames				= new ArrayList();
	private PortalObject		portalObject				= null;
	private JTable				table						= null;

	public PortalTableDataModel( JTable table ) {
		super();
		this.table = table;
	}

	public Class	getCellType( int row ) {
		return (keyValueHash.get(attributeNames.get(row)).getClass());
	}

    public String getColumnName(int col) {
        return columnNames[col];
    }

	public int findColumn(String columnName) {
		return super.findColumn( columnName );
    }


 	public int getColumnCount() {
		return 2;
 	}

 	public int getRowCount() {
    	int size = 0;
    	if( keyValueHash != null ) {
    		size = keyValueHash.size();
    	}
	    return size;
 	}

	public void updateDataModel() {
        this.fireTableDataChanged();
        
    }



 	public Object getValueAt(int rowIndex, int columnIndex) {
    	Object returnedValue = "";

        // find trajectCheckpoint
        if ( portalObject != null ) {
        	if( columnIndex == 0 && rowIndex < attributeNames.size() ) {
        		returnedValue = attributeNames.get(rowIndex);
        	}	else
        	if( columnIndex == 1 && rowIndex < attributeNames.size() ) {
        		returnedValue = keyValueHash.get(attributeNames.get(rowIndex));
        	}
        	
        }

        return returnedValue;
 	}


 	public boolean isCellEditable(int rowIndex, int columnIndex) {
		boolean retValue = false;
		
		if( columnIndex == 1 ) {
			retValue = ((Boolean)editableHash.get(attributeNames.get(rowIndex))).booleanValue();
		}

		return retValue;
 	}


 	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if ( portalObject != null && aValue != null ) {
        	if( columnIndex == 1 && rowIndex < attributeNames.size() ) {
        		String attributeName = (String) attributeNames.get(rowIndex);
        		
        		setObjectField(attributeName, aValue);
        		
        	}
        }
		this.fireTableDataChanged();

 	}




	/**
	 * Returns the columnNames.
	 * @return String[]
	 */
	public String[] getColumnNames() {
		return columnNames;
	}

	/**
	 * Returns the columnSizesPerc.
	 * @return double[]
	 */
	public double[] getColumnSizesPerc() {
		return columnSizesPerc;
	}

	/**
	 * Returns the portalObject.
	 * @return PortalObject
	 */
	public PortalObject getPortalObject() {
		return portalObject;
	}

	private void setObjectField( String name, Object value ) {
		if( this.portalObject != null ) {
			Class portalObject_class = portalObject.getClass();
			
			try {
				Field field = portalObject_class.getField(name);	
				if( field != null ) {
					Class  type = field.getType();
	
	System.out.println("name: " + name);		
	System.out.println("type: " + type);		
					
					if( type != null ) {
						String typeName = type.getName();
	
	System.out.println("typeName: " + typeName);		
						
						if( typeName != null ) {

							if( typeName.equals("int") ) {
								field.setInt(portalObject, Integer.parseInt((String)value));
								keyValueHash.put(name, new Integer((String)value));	
							}	else 
							if( typeName.equals("long") ) {
								field.setLong(portalObject, Long.parseLong((String)value));	
								keyValueHash.put(name, new Long((String)value));
							}	else 
							if( typeName.equals("boolean") ) {
								field.setBoolean(portalObject, ((Boolean)value).booleanValue());	
								keyValueHash.put(name, value);	
							}	else 
							if( typeName.equals("short") ) {
								field.setShort(portalObject, Short.parseShort((String)value));	
								keyValueHash.put(name, new Short((String)value));
							}	else 
							if( typeName.equals("java.lang.String") ) {
								field.set(portalObject, ((String)value));	
								keyValueHash.put(name, (String)value);	
							}
						}
					}
				}
			}	catch( IllegalAccessException iae ) {
				iae.printStackTrace();
				
			}	catch( NoSuchFieldException nsfe ) {
				nsfe.printStackTrace();
				
			}	catch( NumberFormatException nfe ) {
				nfe.printStackTrace();
			}
			
			DefaultPortalValues.width  = portalObject.getRight() - portalObject.getLeft();
			DefaultPortalValues.height = portalObject.getTop() - portalObject.getBottom();
			DefaultPortalValues.floor  = portalObject.floor;
			DefaultPortalValues.ceil   = portalObject.ceil;
			DefaultPortalValues.light  = portalObject.light;
			DefaultPortalValues.light_type = portalObject.light_type;
			DefaultPortalValues.security_type = portalObject.security_type != null ? new String(portalObject.security_type) : null;
			DefaultPortalValues.type = portalObject.type != null ? new String(portalObject.type) : null;
			
		}	
	}
	
	/**
	 * Sets the portalObject.
	 * @param portalObject The portalObject to set
	 */
	public void setPortalObject(PortalObject portalObject) {
		keyValueHash.clear();
		attributeNames.clear();
		editableHash.clear();
		this.portalObject = portalObject;
		
		Class portalObject_class = portalObject.getClass();
		
		Field[] fields = portalObject_class.getDeclaredFields();
System.out.println("fields.length: " + fields.length);		
		for( int cnt=0; cnt<fields.length; cnt++ ) {
			Field field = fields[cnt];
			if( Modifier.isPublic(field.getModifiers()) ) {
				String name = field.getName();
				Class  type = field.getType();

System.out.println("name: " + name);		
System.out.println("type: " + type);		
				
				if( type != null ) {
					String typeName = type.getName();

System.out.println("typeName: " + typeName);		
					
					if( typeName != null ) {
						attributeNames.add(name);
						editableHash.put(name, new Boolean(Modifier.isPublic(field.getModifiers())));

						try {
							if( typeName.equals("int") ) {
								keyValueHash.put(name, new Integer(field.getInt(portalObject)));	
							}	else 
							if( typeName.equals("long") ) {
								keyValueHash.put(name, new Long(field.getLong(portalObject)));	
							}	else 
							if( typeName.equals("boolean") ) {
								keyValueHash.put(name, new Boolean(field.getBoolean(portalObject)));	
							}	else 
							if( typeName.equals("short") ) {
								keyValueHash.put(name, new Short(field.getShort(portalObject)));	
							}	else 
							if( typeName.equals("java.lang.String") ) {
								Object value = field.get(portalObject);
								if( value != null ) {
									keyValueHash.put(name, value);	
								}	else {
									keyValueHash.put(name, "");	
								}
									
							}
						}	catch( IllegalAccessException iae ) {
							iae.printStackTrace();
							
						}
						 
							
					}
				}
			}
			DefaultPortalValues.width  = portalObject.getRight() - portalObject.getLeft();
			DefaultPortalValues.height = portalObject.getTop() - portalObject.getBottom();
			DefaultPortalValues.floor  = portalObject.floor;
			DefaultPortalValues.ceil   = portalObject.ceil;
			DefaultPortalValues.light  = portalObject.light;
			DefaultPortalValues.light_type = portalObject.light_type;
			DefaultPortalValues.security_type = portalObject.security_type != null ? new String(portalObject.security_type) : null;
			DefaultPortalValues.type = portalObject.type != null ? new String(portalObject.type) : null;
			
		}
		
		this.fireTableDataChanged();
	
	}

}
